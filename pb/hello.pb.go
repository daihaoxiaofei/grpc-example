// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.2
// source: protos/hello.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 类似于go语言的结构体，在此定义方法的接收、返回参数
type ParBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParBody) Reset() {
	*x = ParBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_hello_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParBody) ProtoMessage() {}

func (x *ParBody) ProtoReflect() protoreflect.Message {
	mi := &file_protos_hello_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParBody.ProtoReflect.Descriptor instead.
func (*ParBody) Descriptor() ([]byte, []int) {
	return file_protos_hello_proto_rawDescGZIP(), []int{0}
}

func (x *ParBody) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_protos_hello_proto protoreflect.FileDescriptor

var file_protos_hello_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x78, 0x67, 0x72, 0x70, 0x63, 0x22, 0x1f, 0x0a, 0x07, 0x50,
	0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x5f, 0x0a, 0x05,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x0e,
	0x2e, 0x78, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0e,
	0x2e, 0x78, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2d,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x2e, 0x78, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0e, 0x2e, 0x78, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x28, 0x01, 0x30, 0x01, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_hello_proto_rawDescOnce sync.Once
	file_protos_hello_proto_rawDescData = file_protos_hello_proto_rawDesc
)

func file_protos_hello_proto_rawDescGZIP() []byte {
	file_protos_hello_proto_rawDescOnce.Do(func() {
		file_protos_hello_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_hello_proto_rawDescData)
	})
	return file_protos_hello_proto_rawDescData
}

var file_protos_hello_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_protos_hello_proto_goTypes = []interface{}{
	(*ParBody)(nil), // 0: xgrpc.ParBody
}
var file_protos_hello_proto_depIdxs = []int32{
	0, // 0: xgrpc.Hello.Hello:input_type -> xgrpc.ParBody
	0, // 1: xgrpc.Hello.Channel:input_type -> xgrpc.ParBody
	0, // 2: xgrpc.Hello.Hello:output_type -> xgrpc.ParBody
	0, // 3: xgrpc.Hello.Channel:output_type -> xgrpc.ParBody
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_hello_proto_init() }
func file_protos_hello_proto_init() {
	if File_protos_hello_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_hello_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_hello_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_hello_proto_goTypes,
		DependencyIndexes: file_protos_hello_proto_depIdxs,
		MessageInfos:      file_protos_hello_proto_msgTypes,
	}.Build()
	File_protos_hello_proto = out.File
	file_protos_hello_proto_rawDesc = nil
	file_protos_hello_proto_goTypes = nil
	file_protos_hello_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	Hello(ctx context.Context, in *ParBody, opts ...grpc.CallOption) (*ParBody, error)
	Channel(ctx context.Context, opts ...grpc.CallOption) (Hello_ChannelClient, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Hello(ctx context.Context, in *ParBody, opts ...grpc.CallOption) (*ParBody, error) {
	out := new(ParBody)
	err := c.cc.Invoke(ctx, "/xgrpc.Hello/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) Channel(ctx context.Context, opts ...grpc.CallOption) (Hello_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Hello_serviceDesc.Streams[0], "/xgrpc.Hello/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloChannelClient{stream}
	return x, nil
}

type Hello_ChannelClient interface {
	Send(*ParBody) error
	Recv() (*ParBody, error)
	grpc.ClientStream
}

type helloChannelClient struct {
	grpc.ClientStream
}

func (x *helloChannelClient) Send(m *ParBody) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloChannelClient) Recv() (*ParBody, error) {
	m := new(ParBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	Hello(context.Context, *ParBody) (*ParBody, error)
	Channel(Hello_ChannelServer) error
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) Hello(context.Context, *ParBody) (*ParBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHelloServer) Channel(Hello_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xgrpc.Hello/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Hello(ctx, req.(*ParBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).Channel(&helloChannelServer{stream})
}

type Hello_ChannelServer interface {
	Send(*ParBody) error
	Recv() (*ParBody, error)
	grpc.ServerStream
}

type helloChannelServer struct {
	grpc.ServerStream
}

func (x *helloChannelServer) Send(m *ParBody) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloChannelServer) Recv() (*ParBody, error) {
	m := new(ParBody)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xgrpc.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Hello_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _Hello_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/hello.proto",
}
